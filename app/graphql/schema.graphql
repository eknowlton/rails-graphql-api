"""
An ability that grants permissions
"""
enum Ability {
  MANAGE_STORAGE
  MANAGE_TESTMYDEV
}

interface ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!

  """
  A unique identifier for the record
  """
  id: ID!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CreateRole
"""
input CreateRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roleInput: RoleInput!
}

"""
Autogenerated return type of CreateRole
"""
type CreateRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  role: Role
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userInput: UserInput!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of DeleteRole
"""
input DeleteRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteRole
"""
type DeleteRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean!
}

type Error {
  """
  The field the error relates to
  """
  field: String!

  """
  The error message
  """
  message: String!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of ImpersonateUser
"""
input ImpersonateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of ImpersonateUser
"""
type ImpersonateUserPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  refreshToken: String
  user: User
}

"""
Autogenerated input type of InvalidateUserTokens
"""
input InvalidateUserTokensInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of InvalidateUserTokens
"""
type InvalidateUserTokensPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

type Mutation {
  """
  Creates a new role
  """
  createRole(input: CreateRoleInput!): CreateRolePayload

  """
  Creates a new user
  """
  createUser(input: CreateUserInput!): CreateUserPayload

  """
  Delete the specified role
  """
  deleteRole(input: DeleteRoleInput!): DeleteRolePayload

  """
  Provides refresh and access tokens for the specified user
  """
  impersonateUser(input: ImpersonateUserInput!): ImpersonateUserPayload

  """
  Invalidates all issued refresh tokens for the specified user
  """
  invalidateUserTokens(input: InvalidateUserTokensInput!): InvalidateUserTokensPayload

  """
  When an access token expires this mutation should be hit with a valid
  refresh token. It will issue a new access token and a new refresh token.
  """
  refreshTokens(input: RefreshTokensInput!): RefreshTokensPayload

  """
  Resets the users password and returns a valid auth token
  """
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload

  """
  Triggers a reset password email
  """
  sendResetPassword(input: SendResetPasswordInput!): SendResetPasswordPayload

  """
  Syncs the abilities of the specified role to those provided
  """
  setAbilitiesForRole(input: SetAbilitiesForRoleInput!): SetAbilitiesForRolePayload

  """
  Syncs the abilities of the specified user to those provided
  """
  setAbilitiesForUser(input: SetAbilitiesForUserInput!): SetAbilitiesForUserPayload

  """
  Sign the user in
  """
  signInUser(input: SignInUserInput!): SignInUserPayload

  """
  Suspend a user
  """
  suspendUser(input: SuspendUserInput!): SuspendUserPayload

  """
  Updates the password of the current user
  """
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload

  """
  Update the specified role
  """
  updateRole(input: UpdateRoleInput!): UpdateRolePayload

  """
  Update the specified user
  """
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

"""
The properties of a role that can be updated
"""
input PatchRoleInput {
  name: String
}

"""
The properties of a user that can be updated
"""
input PatchUserInput {
  firstName: String
  lastName: String
}

type Query {
  """
  Returns the currently logged in user
  """
  me: User

  """
  The role for the specified id
  """
  role(id: ID!): Role

  """
  Get all roles
  """
  roles: [Role!]!

  """
  The user for the specified id
  """
  user(id: ID!): User

  """
  Get all users
  """
  users: [User!]!
}

"""
Autogenerated input type of RefreshTokens
"""
input RefreshTokensInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  refreshToken: String!
}

"""
Autogenerated return type of RefreshTokens
"""
type RefreshTokensPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  resetPasswordToken: String!
}

"""
Autogenerated return type of ResetPassword
"""
type ResetPasswordPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

type Role implements ActiveRecord {
  abilities: [Ability!]

  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Properties for a Role
"""
input RoleInput {
  name: String!
}

"""
Autogenerated input type of SendResetPassword
"""
input SendResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of SendResetPassword
"""
type SendResetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of SetAbilitiesForRole
"""
input SetAbilitiesForRoleInput {
  abilities: [Ability!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of SetAbilitiesForRole
"""
type SetAbilitiesForRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  role: Role
}

"""
Autogenerated input type of SetAbilitiesForUser
"""
input SetAbilitiesForUserInput {
  abilities: [Ability!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of SetAbilitiesForUser
"""
type SetAbilitiesForUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of SignInUser
"""
input SignInUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of SuspendUser
"""
input SuspendUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of SuspendUser
"""
type SuspendUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of UpdatePassword
"""
input UpdatePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String!
  newPassword: String!
}

"""
Autogenerated return type of UpdatePassword
"""
type UpdatePasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of UpdateRole
"""
input UpdateRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  roleInput: PatchRoleInput!
}

"""
Autogenerated return type of UpdateRole
"""
type UpdateRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  role: Role
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  userInput: PatchUserInput!
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

type User implements ActiveRecord {
  """
  A list of abilities the user has. Includes the users own abilities
  and any abilties gained from their role.
  """
  abilities: [Ability!]
  active: Boolean!
  admin: Boolean!

  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  email: String!
  firstName: String!

  """
  A unique identifier for the record
  """
  id: ID!
  lastName: String!

  """
  A list of abilities that are assigned directly to the user.
  """
  ownAbilities: [Ability!]

  """
  A list of abilities granted to the user by their role.
  """
  roleAbilities: [Ability!]

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Properties for a User
"""
input UserInput {
  email: String!
  firstName: String!
  lastName: String!
}